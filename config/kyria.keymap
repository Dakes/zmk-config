/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

// Thanks to auipga from the ZMK Discord for providing this.
#include "keymap-german-rev3.h"

// Layer Definitions
#define QWERTZ 0
#define NEO 1
#define SYM 2
#define NAV_NUM 3
#define FUNC 4
// #define NAV_VIM 5

// Behavior configuration
&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&sk {
    release-after-ms = <500>;
    quick-release;

/ {
    behaviors {
        slt: sticky_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_LAYER_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&sk>;
        };
    };

        keymap {
        compatible = "zmk,keymap";

        qwertz {
// ----------------------------------------------------------------------------------------------------------------------------------
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                    #                    |  Y   |  U    |  I    |  O   |   P   |   Ü   |
// | LSHFT |  A  |  S  |  D   |  F   |  G   |                    #                    |  H   |  J    |  K    |  L   |   Ö   |Ä/RSHFT|
// | LCTRL |  Z  |  X  |  C   |  V   |  B   |   ESC   | L SHIFT |#|    F5   | L SHIFT |  N   |  M    |  ,    |  .   |  - _  |ß/RCTRL|
//                     | ---  | LGUI | LALT | RET/sym |SPACE/num|#| RET/num |SPACE/sym| BSPC | DEL   |  ---  |
            bindings = <
&kp TAB   &kp Q      &kp W      &kp E       &kp R       &kp T                                    /**/                                  &kp Y          &kp U        &kp I         &kp O        &kp P          &kp DE_UE
&kp LSHFT &mt LGUI A &mt LALT S &mt LCTRL D &mt LSHFT F &kp G                                    /**/                                  &kp H          &mt LSHFT J  &mt LCTRL K   &mt LALT L   &mt LGUI DE_OE &mt RSHFT DE_AE
&kp LCTRL &kp Z      &kp X      &kp C       &kp V       &kp B     &kp LSHFT   &kp LSHFT          /**/  &kp LSHFT        &kp LSHFT      &kp N          &kp M        &kp COMMA     &kp DOT      &kp DE_MINUS   &mt RCTRL DE_SS
                                &tog NEO    &kp LGUI    &kp RET   &lt SYM RET &lt NAV_NUM SPACE  /**/  &lt NAV_NUM RET  &lt SYM SPACE  &kp TAB        &kp BSPC     &kp RALT
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        neo {
// --------------------------------------------------------------------------------------------------------------------------------
// | TAB |  X   |  V   |   L   |   C   |    W    |                    #                    |    K    |   H   |   G   |  F  |  Q   |   ß   |
// |LSHFT|U/LGUI|I/LALT|A/LCTRL|E/LSHFT|    O    |                    #                    |    S    |N/LSHFT|R/LCTRL|/LALT|D/LGUI|Y/RSHFT|
// |LCTRL|   Ü  |   Ö  |   Ä   |   P   |    Z    |   ESC   | L SHIFT |#|    F5   | L SHIFT |    B    |    M  |   ,   | .   |  J   |-_/RCtl|
//                     | ---   |  LGUI |  LALT   | RET/sym |SPACE/num|#| RET/num |SPACE/sym|  BSPC   |  DEL  |  ---  |


            bindings = <
&kp TAB    &kp X       &kp V      &kp L       &kp C       &kp W                                    /**/                                  &kp K   &kp H       &kp G       &kp F      &kp Q      &kp DE_SS
&kp LSHFT  &mt LGUI U  &mt LALT I &mt LCTRL A &mt LSHFT E &kp O                                    /**/                                  &kp S   &mt LSHFT N &mt LCTRL R &mt LALT T &mt LGUI D &mt RSHFT DE_Y
&kp LCTRL  &kp DE_UE   &kp DE_OE  &kp DE_AE   &kp P       &kp DE_Z  &kp LSHFT   &kp LSHFT          /**/  &kp LSHFT        &kp LSHFT      &kp B   &kp M       &kp CMMA    &kp DOT    &kp J      &mt RCTRL DE_MINUS
                                  &tog NEO    &kp LGUI    &kp RET   &lt SYM RET &lt NAV_NUM SPACE  /**/  &lt NAV_NUM RET  &lt SYM SPACE  &kp TAB &kp BSPC    &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };


            symbols {
// -------------------------------------------------------------------------------------------------------------------.
// |     |  °  |  _  |  [  |  ]  |  ^  |                    #                    |   !  |  <  |  >  |  =  |  &  |     |
// |     |  \  |  /  |  {  |  }  |  *  |                    #                    |   ?  |  (  |  )  |  -  |  :  |     |
// |     |  #  |  $  |  |  |  ~  |  `  |   ---   |   ---   |#|   ---   |   ---   |   +  |  %  |  "  |  '  |  ;  |     |
//                   |     |     |HELD |  SPACE  |   ESC   |#|   RET   |  SPACE  |      |  @  |  €  |

            bindings = <
&trans  &kp DE_DEG &kp DE_UNDER &kp DE_LBKT &kp DE_RBKT  &kp DE_CARET                                /**/                                &kp DE_EXCL  &kp DE_LT    &kp DE_GT   &kp DE_EQUAL &kp DE_AMPS  &trans
&trans  &kp DE_BSLH &kp DE_FSLH &kp DE_LBRC &kp DE_RBRC  &kp DE_STAR                                 /**/                                &kp DE_QMARK &kp DE_LPAR  &kp DE_RPAR &kp DE_MINUS &kp DE_COLON &trans
&trans  &kp DE_HASH &kp DE_DLLR &kp DE_PIPE &kp DE_TILDE &kp DE_GRAVE   &trans       &trans          /**/  &trans        &trans          &kp DE_PLUS  &kp DE_PRCNT &kp DE_DQT  &kp DE_SQT   &kp DE_SEMI  &trans
                                &trans      &trans       &trans         &lt FUNC RET &lt FUNC SPACE  /**/  &lt FUNC RET  &lt FUNC SPACE  &lt FUNC ENTER &kp DE_AT  &kp DE_EURO
            >;
        };

        nav_num {
// --------------------------------------------------------------------------------------------------------------------------------.
// |     | PgUp | Bksp |  up   |  del  | PgDn|                    #                    |   *   |  7   |  8   |   9   |   +   |     |
// |     | home | left |  down | right | end |                    #                    |   /   |  4   |  5   |   6   |  ./:  |     |
// |     |  esc |  tab |       |       |shift| L SHIFT | L SHIFT |#| L SHIFT | L SHIFT |   0   |  1   |  2   |   3   |  ,/;  |     |
//                     |       |       |  0  |  SPACE  |   ESC   |#|   RET   |    0    |       |      |  0   |

            bindings = <
&trans  &kp PG_UP &kp BSPC  &kp UP     &kp DEL    &kp PG_DN                                    /**/                                &kp DE_STAR   &kp N7  &kp N8   &kp N9  &kp DE_PLUS &trans
&trans  &kp HOME  &kp LEFT  &kp DOWN   &kp RIGHT  &kp END                                      /**/                                &kp DE_FSLH   &kp N4  &kp N5   &kp N6  &kp DOT     &trans
&trans  &kp ESC   &kp TAB   &trans     &trans     &kp LSHFT       &trans       &trans          /**/  &trans        &trans          &kp N0        &kp N1  &kp N2   &kp N3  &kp CMMA     &trans
                            &trans     &trans     &lt FUNC SPACE  &lt FUNC RET &lt FUNC SPACE  /**/  &lt FUNC RET  &lt FUNC SPACE  &lt FUNC ENTER &trans &kp N0
            >;
        };


        func {
// --------------------------------------------------------------------------------------------------------------------------------.
// |     | sleep|      |bri min| lock  |bri +|                    #                    | mute  |  F7  |  F8  |  F9   |  F10  |     |
// |     |      | prev | play  | next  |bri -|                    #                    | vol + |  F4  |  F5  |  F6   |  F11  |     |
// |     |      |bt_clr|bt_prev| bt_nxt| bt 0|   ---   |   ---   |#|   ---   |   ---   | vol - |  F1  |  F2  |  F3   |  F12  |     |
//                     |       | play  | next|   ---   |   ---   |#|   ---   |   ---   |       | play | next |

            bindings = <
&trans  &kp K_SLEEP &none   &cp C_BRI_MIN &kp K_LOCK &cp C_BRI_UP                /**/                &kp K_MUTE    &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &none    &kp K_PREV &kp K_PP      &kp K_NEXT &cp C_BRI_DN                /**/                &kp K_VOL_UP  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &none    &bt BT_CLR &bt BT_PRV    &bt BT_NXT &bt BT_SEL 0  &trans &trans /**/ &trans &trans  &kp K_VOL_DN  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                            &kp K_PP      &kp K_NEXT &none         &trans &trans /**/ &trans &trans  &none         &kp K_PP &kp K_NEXT
            >;
        };
    };
};
