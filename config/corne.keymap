/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 * Copied from https://github.com/jasoneliu/zmk-config
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

// Thanks to auipga from the ZMK Discord for providing this. 
#include "keymap-german-rev3.h"

// Layer Definitions
#define QWERTY 0
#define NEO 1
#define SYM 2
#define NAV_NUM 3
#define FUNC 4
#define NAV_VIM 5

// Behavior configuration
&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};
&sk {
    release-after-ms = <500>;
    quick-release;
};

/ {

    behaviors {
        slt: sticky_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_LAYER_TAP";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&sk>;
        };
    };

keymap {
        compatible = "zmk,keymap";


        qwertz {
            // TODO: add umlaute on double taps or something
            // TODO: permanent switch between qwertz and neo
// ---------------------------------------------------------------------------------------------------------
// |     |   Q    |   W    |     E     |     R     |     T     | # |     Z     |     U    |    I     |    O   |   P    |     |
// |     | A/LGUI | S/LALT |  D/LCTRL  |  F/LSHFT  |     G     | # |     H     | J/LSHFT  | K/LCTRL  | L/LALT | ;/LGUI |     |
// |     |   Y    |    X   |     C     |     V     |     B     | # |     N     |     M    |    ,     | ./RALT |   /    |     |
//                         |   GUI     |  alt      |NAV_NUM/SPC| # | SYM/ENTER |   BSPC   |    DEL   |

            bindings = <
&trans  &kp Q       &kp W       &kp E          &kp R          &kp T                &kp DE_Z       &kp U         &kp I        &kp O         &kp P          &trans
&trans  &mt LGUI A  &mt LALT S  &mt LCTRL D    &mt LSHFT F    &kp G                &kp H          &mt LSHFT J   &mt LCTRL K  &mt LALT L    &mt LGUI DE_OE &trans
&trans  &kp DE_Y    &kp X       &kp C          &kp V          &kp B                &kp N          &kp M         &kp CMMA     &mt RALT DOT  &kp DE_MINUS   &trans
                                &kp LGUI       &kp LALT       &lt NAV_NUM SPACE    &lt SYM ENTER  &kp BSPC      &kp DEL          >;
        };

        neo {
            // TODO: add umlaute on double taps or something
// ---------------------------------------------------------------------------------------------------------
// |     |   X    |   V    |     L     |     C     |     W     | # |     K     |    H     |    G     |    F   |   Q/ß  |     |
// |     | U/LGUI | I/LALT |  A/LCTRL  |  E/LSHFT  |     O     | # |     S     | N/LSHFT  | R/LCTRL  | T/LALT | D/LGUI | Y???|
// |     |  (Ü)Y  | (Ö)ß   |     Ä     |     P     |     Z     | # |     B     |     M    |    ,     |   .    |   J    |     |
//                         |   GUI     |    ALT    | TAB/MOUSE | # | SPACE/SYM |   BSPC   |   DEL    |

            bindings = <
&trans  &kp X       &kp V       &kp L          &kp C          &kp W                &kp K          &kp H        &kp G       &kp F      &kp Q        &trans
&trans  &mt LGUI U  &mt LALT I  &mt LCTRL A    &mt LSHFT E    &kp O                &kp S          &mt LSHFT N  &mt LCTRL R &mt LALT T &mt LGUI D   &trans
&trans  &kp DE_Y    &kp DE_SS   &kp DE_AE      &kp P          &kp DE_Z             &kp B          &kp M        &kp CMMA    &kp DOT    &kp J        &trans
                                &kp LGUI       &kp LALT       &lt NAV_NUM SPACE    &lt SYM ENTER  &kp BSPC     &kp DEL            >;
        };

        symbols {
// ---------------------------------------------------------------------------------
// |     |  °  |  _  |  [  |  ]  |  ^  | # |   !  |  <  |  >  |  =  |  &  |     |
// |     |  \  |  /  |  {  |  }  |  *  | # |   ?  |  (  |  )  |  -  |  :  |     |
// |     |  #  |  $  |  |  |  ~  |  `  | # |   +  |  %  |  "  |  '  |  ;  |     |
//                   |     |     |HELD | # |      |  @  |  €  |

            bindings = <
&trans  &kp DE_DEG &kp DE_UNDER &kp DE_LBKT &kp DE_RBKT &kp DE_CARET   /**/   &kp DE_EXCL  &kp DE_LT    &kp DE_GT   &kp DE_EQUAL &kp DE_AMPS  &trans
&trans  &kp DE_BSLH &kp DE_FSLH &kp DE_LBRC &kp DE_RBRC &kp DE_STAR    /**/   &kp DE_QMARK &kp DE_LPAR  &kp DE_RPAR &kp DE_MINUS &kp DE_COLON &trans
&trans  &kp DE_HASH &kp DE_DLLR &kp DE_PIPE &kp DE_TILDE &kp DE_GRAVE  /**/   &kp DE_PLUS  &kp DE_PRCNT &kp DE_DQT  &kp DE_SQT   &kp DE_SEMI  &trans
                                &trans      &trans      &lt FUNC SPACE /**/   &lt FUNC ENTER &kp DE_AT  &kp DE_EURO
            >;
        };

        nav_num {
// ---------------------------------------------------------------------------------------
// |     | PgUp | Bksp |  up   |  del  | PgDn| # |   *   |  7   |  8   |   9   |   +   |     |
// |     | home | left |  down | right | end | # |   /   |  4   |  5   |   6   |  ./:  |     |
// |     |  esc |  tab |       |       |shift| # |   0   |  1   |  2   |   3   |  ,/;  |     |
//                     |       |       |  0  | # |       |      |      |

            bindings = <
&trans  &kp PG_UP &kp BSPC  &kp UP     &kp DEL    &kp PG_DN         &kp DE_STAR   &kp N7  &kp N8   &kp N9  &kp DE_PLUS &trans
&trans  &kp HOME  &kp LEFT  &kp DOWN   &kp RIGHT  &kp END           &kp DE_FSLH   &kp N4  &kp N5   &kp N6  &kp DOT     &trans
&trans  &kp ESC   &kp TAB   &trans     &trans     &kp LSHFT         &kp N0        &kp N1  &kp N2   &kp N3  &kp CMMA     &trans
                            &trans     &trans     &lt FUNC SPACE    &lt FUNC ENTER &trans &trans
            >;
        };
        

        func {
// ---------------------------------------------------------------------------------------
// |     | sleep|      |bri min| lock  |bri +| # | mute  |  F7  |  F8  |  F9   |  F10  |     |
// |     |      | prev | play  | next  |bri -| # | vol + |  F4  |  F5  |  F6   |  F11  |     |
// |     |      |bt_clr|bt_prev| bt_nxt| bt 0| # | vol - |  F1  |  F2  |  F3   |  F12  |     |
//                             | play  | next| # |       | play | next |

            bindings = <
&trans  &kp K_SLEEP &none   &cp C_BRI_MIN &kp K_LOCK &cp C_BRI_UP  &kp K_MUTE    &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &none    &kp K_PREV &kp K_PP      &kp K_NEXT &cp C_BRI_DN  &kp K_VOL_UP  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &none    &bt BT_CLR &bt BT_PRV    &bt BT_NXT &bt BT_SEL 0  &kp K_VOL_DN  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                            &kp K_PP      &kp K_NEXT &none         &none         &kp K_PP &kp K_NEXT
            >;
        };

// TODO: Shortcut Layer. (Copy, paste, undo, etc.). nav_vim?

        nav_vim {
// ---------------------------------------------------------------------------------------
// |     |      |      |       |       |     | # | REDO  | CUT  | COPY | PASTE | UNDO  |     |
// |     | LGUI | LALT | LCTRL | LSHFT |     | # | CAPS  | LEFT | DOWN | UP    | RIGHT |     |
// |     |      | RALT |       |       |     | # | INS   | HOME | PGDN | PGUP  | END   |     |
//                     |       | HELD  |     | # |       |      |      |

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &kp K_REDO    &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_UNDO  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &kp LEFT      &kp DOWN   &kp UP      &kp RIGHT   &kp CAPSLOCK &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &kp INS       &kp HOME   &kp PG_DN   &kp PG_UP    &kp END     &trans
                            &trans     &trans     &trans        &trans        &trans     &trans
            >;
        };


    };};
